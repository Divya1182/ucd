import groovy.transform.Field

library "epf@main"

env.CNP_IGNORE_CONFTEST_ANALYSIS_FAILURE=true

env.CNP_AWS_IDP_PROVIDER='Okta'
env.CNP_AWS_TF_CRED_DEV = 'DAWS-HS-UPSILONFRIES'
env.CNP_AWS_TF_CRED_QA = 'TAWS-HS-UPSILONFRIES'
env.CNP_AWS_TF_CRED_UAT = 'TAWS-HS-UPSILONFRIES'
env.CNP_AWS_TF_CRED_PROD = 'PAWS-HS-UPSILONFRIES'

def approvers = 'accounts\\C8P8ZF,accounts\\P57026, accounts\\EI5194, accounts\\C8Q9M3, accounts\\C8G2NZ'; // Divya/Rahul/Kris/Sautam/Surya

@Field def deployableBranchesPattern = '^(develop|fix|release|feature).*';
boolean isProductionDeployment = env.BRANCH_NAME ==~ /^(release|hotfix).*/

def releaseBranchPattern = '^release.*';
def developBranchPattern = '^develop.*'; 

String awsRoleName = "DEPLOYER"
String tfversion = '1.6.6'
String tfcontainerImage  = 'registry-dev.cigna.com/cnp/cnp-docker-terraform'
String tfcontainerVersion = '1.0.0-dev-ov2'

List phasesToRun = [];


def approveRequestPhase(String msg, String submitter = '', String branchPatternStr = deployableBranchesPattern) {
    return [
        branchPattern: branchPatternStr,
        stageName    : 'Awaiting approval',
        lintingTypes: [
            approvalrequest: [
                message		: "Do you want to continue deployment to ${msg}?",
                id			: 'deployApprover',
                timeOut		: 120,
                submitter	: submitter,
                failedStatus: 'SUCCESS'
           ]
       ]
   ]
}


// DEV Deployment definition
def deployDev = [
    moduleType            : 'terraform',
    moduleName            : 'cnp-deploy-terraform-aws',
    subCommand            : 'apply',
    branchPattern         : deployableBranchesPattern,
    sdlcEnvironment       : 'dev',
    isProductionDeployment: false,
    container             : [
                                image  : tfcontainerImage,
                                version: tfcontainerVersion,
                                cpu    : 1000,
                                memory : 2000,
                            ],
    args                  : [
                                configDir             : 'envs/dev',
                                env                   : 'dev',
                                awsAccountId          : '364685145795',
                                awsUsername           : 'DAWS-HS-UPSILONFRIES',
                                awsRoleName           : awsRoleName,
                                tfVersion             : tfversion,
                                tfDir                 : 'terraform'
                            ], 
    extraCredentials      : [
                                usernamePassword(
                                    credentialsId: 'INTAKE-CONSUMER-DEV', 
                                    usernameVariable: 'TF_VAR_intent_consumer_key', 
                                    passwordVariable: 'TF_VAR_intent_consumer_secret'
                                )
                            ],  
]


// QA Deployment definition
def deployQA = [
    moduleType            : 'terraform',
    moduleName            : 'cnp-deploy-terraform-aws',
    subCommand            : 'apply',
    branchPattern         : deployableBranchesPattern,
    sdlcEnvironment       : 'qa',
    isProductionDeployment: false,
    container             : [
                                image  : tfcontainerImage,
                                version: tfcontainerVersion,
                                cpu    : 1000,
                                memory : 2000,
                            ],
    args                  : [
                                configDir             : 'envs/qa',
                                env                   : 'qa',
                                awsAccountId          : '310705775535',
                                awsUsername           : 'TAWS-HS-UPSILONFRIES',
                                awsRoleName           : awsRoleName,
                                tfVersion             : tfversion,
                                tfDir                 : 'terraform'
                            ], 
    extraCredentials      : [
                                usernamePassword(
                                    credentialsId: 'INTAKE-CONSUMER-QA', 
                                    usernameVariable: 'TF_VAR_intent_consumer_key', 
                                    passwordVariable: 'TF_VAR_intent_consumer_secret'
                                )
                            ],  
]


// UAT Deployment definition
def deployUAT = [
    moduleType            : 'terraform',
    moduleName            : 'cnp-deploy-terraform-aws',
    subCommand            : 'apply',
    branchPattern         : deployableBranchesPattern,
    sdlcEnvironment       : 'uat',
    isProductionDeployment: false,
    container             : [
                                image  : tfcontainerImage,
                                version: tfcontainerVersion,
                                cpu    : 1000,
                                memory : 2000,
                            ],
    args                  : [
                                configDir             : 'envs/uat',
                                env                   : 'uat',
                                awsAccountId          : '310705775535',
                                awsUsername           : 'TAWS-HS-UPSILONFRIES',
                                awsRoleName           : awsRoleName,
                                tfVersion             : tfversion,
                                tfDir                 : 'terraform'
                            ], 
    extraCredentials      : [
                                usernamePassword(
                                    credentialsId: 'INTAKE-CONSUMER-UAT', 
                                    usernameVariable: 'TF_VAR_intent_consumer_key', 
                                    passwordVariable: 'TF_VAR_intent_consumer_secret'
                                )
                            ],  
]



// PROD Deployment definition
def deployProd = [
    moduleType            : 'terraform',
    moduleName            : 'cnp-deploy-terraform-aws',
    subCommand            : 'apply',
    branchPattern         : deployableBranchesPattern,
    sdlcEnvironment       : 'prod',
    isProductionDeployment: true,
    container             : [
                                image  : tfcontainerImage,
                                version: tfcontainerVersion,
                                cpu    : 1000,
                                memory : 2000,
                            ],
    args                  : [
                                configDir             : 'envs/prod',
                                env                   : 'prod',
                                awsAccountId          : '928817075302',
                                awsUsername           : 'PAWS-HS-UPSILONFRIES',
                                awsRoleName           : awsRoleName,
                                tfVersion             : tfversion,
                                tfDir                 : 'terraform'
                            ], 
    extraCredentials      : [
                                usernamePassword(
                                    credentialsId: 'INTAKE-CONSUMER-PROD', 
                                    usernameVariable: 'TF_VAR_intent_consumer_key', 
                                    passwordVariable: 'TF_VAR_intent_consumer_secret'
                                )
                            ],  
]


/*** DEV ***/
phasesToRun.add(approveRequestPhase("Dev", approvers));
phasesToRun.add(deployDev);

/*** QA ***/
phasesToRun.add(approveRequestPhase("QA", approvers));
phasesToRun.add(deployQA);

/*** UAT ***/
phasesToRun.add(approveRequestPhase("UAT", approvers));
phasesToRun.add(deployUAT);

/*** PROD ***/
phasesToRun.add(approveRequestPhase("Prod", approvers));
phasesToRun.add(deployProd);

cignaBuildFlow {
    githubConnectionName = 'github'
    githubCredentialsId = 'GIT_TOKEN'
    commitStatusName = ''
    cloudName = 'pbbef-openshift-devops1'
    phases = phasesToRun
}
